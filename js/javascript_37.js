/*
  # 문제
  크레인 인형뽑기 게임

  # 문제 설명
  게임개발자인 "죠르디"는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.
  "죠르디"는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.
  게임 화면은 "1 x 1" 크기의 칸들로 이루어진 "N x N" 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다.(위 그림은 "5 x 5" 크기의 예시입니다).
  각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다. 모든 인형은 "1 x 1" 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다.
  게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데,
  이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다. 다음 그림은 [1번, 5번, 3번] 위치에서 순서대로 인형을 집어 올려 바구니에 담은 모습입니다.
  만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 위 상태에서 이어서 [5번] 위치에서 인형을 집어
  바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다. 크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도
  일어나지 않습니다. 또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. (그림에서는 화면표시 제약으로 5칸만으로 표현하였음)
  게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때,
  크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.

  # 제한사항
  - board 배열은 2차원 배열로 크기는 "5 x 5" 이상 "30 x 30" 이하입니다.
  - board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.
    - 0은 빈 칸을 나타냅니다.
    - 1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.
  - moves 배열의 크기는 1 이상 1,000 이하입니다.
  - moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.

  # 입출력 예
  board	                                                          moves	              result
  [[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]]	  [1,5,3,5,1,2,1,4]	  4

  # 입출력 예 설명
  입출력 예 #1
  인형의 처음 상태는 문제에 주어진 예시와 같습니다. 크레인이 [1, 5, 3, 5, 1, 2, 1, 4] 번 위치에서 차례대로 인형을 집어서 바구니에 옮겨 담은 후,
  상태는 아래 그림과 같으며 바구니에 담는 과정에서 터트려져 사라진 인형은 4개 입니다.
*/

const board = [
  [0, 0, 0, 0, 0],
  [0, 0, 1, 0, 3],
  [0, 2, 5, 0, 1],
  [4, 2, 4, 4, 2],
  [3, 5, 1, 3, 1],
];
const moves = [1, 5, 3, 5, 1, 2, 1, 4];

const solutionFirst = (board, moves) => {
  const basket = [];
  let result = 0;

  for (let i = 0; i < moves.length; i++) {
    for (let j = 0; j < board.length; j++) {
      const dollIndex = moves[i] - 1;

      if (board[j][dollIndex] === 0) continue;

      basket.push(board[j][dollIndex]);
      board[j][dollIndex] = 0;
      break;
    }
  }

  for (let i = 0; i < basket.length; i++) {
    if (basket[i] !== basket[i + 1]) continue;

    basket.splice(i, 2);
    result += 2;

    if (i == 0) {
      i -= 1;
    } else {
      i -= 2;
    }
  }

  return result;
};

console.log(solutionFirst(board, moves));

/*
  # 문제풀이 - solutionFirst

  1. 뽑은 인형을 담아줄 basket 변수와 제거된 인형의 갯수를 담아줄 moves 변수를 생성한다.
  2. moves의 길이만큼 반복하는 반복문과 board 길이만큼 반복하는 반복문을 중첩하여 생성한다.
  3. board를 반복하여 인형을 탐색하는데 이 때 moves의 요소 값을 index로 설정한다. board의 위치 값은 1~5로 1부터 시작하므로 moves 요소 값에 -1을 지정하여 index를 구한다.
  4. 탐색 할 인덱스인 dollIndex 변수를 활용하여 board를 탐색하는데 board의 요소가 0인 경우 인형이 없는 것이기 때문에 continue를 통해 다음 반복으로 넘긴다.
  5. board의 요소가 0이 아닌 경우 뽑아야 할 인형이기 때문에 push 메소드로 basket 변수에 담은 후 뽑힌 인형의 값은 0으로 바꾸어준다. 그 후 해당 위치 값에 인형은 뽑았기 때문에 moves 요소 값 중 다음 요소를 사용해야하므로 break를 사용하여 다음 반복을 수행한다.
  6. 모든 인형을 다 뽑은 후 연속 중복되는 인형을 제거하기 위해 반복문을 활용한다. 이 때 index로 활용되는 i값과 다음 요소를 찾는 i+1값을 비교하여 연속 중복 인형을 찾는데 연속 중복이 아닌 경우 continue로 다음 반복을 수행한다.
  7. 연속 중복을 발견하는 경우 splice 메소드로 연속 중복된 인형 2개를 제거해주고 제거된 인형의 갯수를 카운트해주기 위해 result 변수에 값을 증가시킨다.
  8. 인형의 제거로 인해 배열이 변경되므로 index값을 새로 초기화해주는데 인형 2개가 제거되므로 index값에 -2만큼 감소시켜준다. 이 때 index가 0인 경우에는 반복문 시작과 동시에 연속 중복을 발견하므로 무한 루프를 막기 위해 -1만큼 감소시켜준다.
*/
