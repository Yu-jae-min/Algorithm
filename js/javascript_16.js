/*
    # 문제
    시저 암호

    # 문제 설명
    어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다.
    예를 들어 "AB"는 1만큼 밀면 "BC"가 되고, 3만큼 밀면 "DE"가 됩니다.
    "z"는 1만큼 밀면 "a"가 됩니다.
    문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.

    # 제한 조건
    공백은 아무리 밀어도 공백입니다.
    s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.
    s의 길이는 8000이하입니다.
    n은 1 이상, 25이하인 자연수입니다.

    # 입출력 예
    s	        n	    result
    "AB"	    1	    "BC"
    "z"	        1	    "a"
    "a B z"	    4	    "e F d"
*/

const test01 = (s, n) => {
    // UTF-16 코드 : A~Z(65~90), a~b(97~122), 공백(32)
    return s
        .split('')
        .map(str => {
            return str === ' ' ?
                str : str.toUpperCase().charCodeAt() + n > 90 ?
                String.fromCharCode(str.charCodeAt() + n - 26) : String.fromCharCode(str.charCodeAt() + n);
        })
        .join('');
}

console.log(test01('ABc Z', 1));

  /*
      # 문제풀이 - test01
      1. 전달받은 파라미터를 split으로 잘라 배열에 담는다.
      2. 배열을 map()으로 돌리는데 이 때 삼항연산자를 중첩으로 사용한다. 첫번째 삼항연산자 조건은 파라미터의 값이 공백일 경우 공백을 그대로 출력하고
      아닌 경우 각 요소를 대문자로 바꾸었을 때의 UTF-16 코드 + n 의 값이 90을 초과하는지 체크하는 삼항연산자를 사용한다.
      3. UTF-16 코드 + n 의 값이 90을 초과하는 경우 마지막 알파벳인 z를 넘어가는 것이기 때문에 최종 값에 UTF-16 코드 + n 값에 -26 을 빼준 후
      문자열로 반환하여 출력하고 아닌 경우 UTF-16 코드 + n 값을 문자열로 반환하여 출력한다.
  */