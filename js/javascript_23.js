/*
  # 문제
  두 정수 사이의 합

  # 문제 설명
  두 정수 a, b가 주어졌을 때 a와 b 사이에 속한 모든 정수의 합을 리턴하는 함수, solution을 완성하세요.
  예를 들어 a = 3, b = 5인 경우, 3 + 4 + 5 = 12이므로 12를 리턴합니다.

  # 제한 조건
  a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.
  a와 b는 -10,000,000 이상 10,000,000 이하인 정수입니다.
  a와 b의 대소관계는 정해져있지 않습니다.

  # 입출력 예
  a	  b	  return
  3	  5	  12
  3	  3	  3
  5	  3	  12
*/

const test01 = (a, b, sum = 0) => {
  for (let i = Math.min(a, b); i <= Math.max(a, b); i++) sum += i;
  return sum;
};

console.log(test01(5, 3)); // 12

/*
  # 문제풀이 - test01
  1. 누적하여 더하여 줄 파라미터 sum을 초기화하여 전달하였다.
  2. for 반복문을 사용하여 i의 초기 값은 a, b 파라미터 중 작은 값으로 설정하였고 반복되는 조건은 이 값이 a, b 파라미터 중 큰 값보다 작거나 같을 때까지
  반복하며 추가한 파라미터 sum에 누적하여 더해주었다.
*/

const test02 = (a, b) => {
  return ((a + b) * (Math.abs(b - a) + 1)) / 2;
};

console.log(test02(5, 3)); // 12

/*
  # 문제풀이 - test02
  다른 개발자의 풀이이다. 등차수열의 합인 양 끝의 합 * 양 끝의 합의 개수 공식을 사용하였다.
*/

/*
  # 문제풀이 비교
  함수 실행 속도 : test02 > test01
  함수 실행 속도는 test02가 빨랐다. 코드의 양도 test02가 적었다.
  하지만 수학 공식을 사용하였기 때문에 수학 공식을 모르는 경우 어떤 로직인지 파악하는게 어려울 수도 있다는 생각도 들었다.
  하지만 성능, 코드의 길이가 더 좋으므로 test02가 더 좋은 풀이인 것 같다.
*/
