/*
    # 문제
    x만큼 간격이 있는 n개의 숫자

    # 문제 설명
    함수 solution은 정수 x와 자연수 n을 입력 받아, x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트를 리턴해야 합니다.
    다음 제한 조건을 보고, 조건을 만족하는 함수, solution을 완성해주세요.

    # 제한 조건
    x는 -10000000 이상, 10000000 이하인 정수입니다.
    n은 1000 이하인 자연수입니다.

    # 입출력 예
    x	n	answer
    2	5	[2,4,6,8,10]
    4	3	[4,8,12]
    -4	2	[-4, -8]
*/

const test01 = (x, n) => {
  return n === 1 ? [x] : [...test01(x, n - 1), x * n];
};

console.log(test01(2, 5));

/*
  # 문제풀이 - test01
  1. 삼항연산자를 활용하여 재귀함수의 basc case를 지정하고 최종 출력 값의 타입은 배열이기 때문에 배열을 리턴하도록 한다.
  2. 최종 출력 값 전까지 누적으로 배열이 쌓이지 않도록 spread문법을 활용한다.
  3. 재귀함수는 서브호출 시에 함수 실행을 중단하고 서브호출을 진행하게 된다. 이 때 새로운 컨텍스트가 생성된다. 이 과정을 도식화하면
  10 연산 후 중단, 서브호출(재귀함수) 실행 -> 8 연산 후 중단, 서브호출 실행 -> 6 연산 후 중단, 서브호출 실행 ... 이 진행되고
  base case에 걸리게 되면 중단되었던 함수들이 실행된다. 서브호출의 return 값을 알고 있기 때문에 2->4->6->8->10 순으로 누적시킨다.
*/

const test02 = (x, n) => {
  const result = [];

  for (let i = 1; i <= n; i++) {
    result.push(x * i);
  }

  return result;
};

console.log(test02(2, 5));

/*
  # 문제풀이 - test02
  1. 최종 출력 값을 담을 수 있는 배열을 생성한다.
  2. 반복문을 통해 연산 값을 순차적으로 배열에 담는다.
*/
