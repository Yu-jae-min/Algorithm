/*
    # 문제
    최대공약수와 최소공배수

    # 문제 설명
    두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요.
    배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다.
    예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

    # 제한 조건
    두 수는 1이상 1000000이하의 자연수입니다.

    # 입출력 예
    n	m	return
    3	12	[3, 12]
    2	5	[1, 10]

    # 입출력 예 설명
    입출력 예 #1
    위의 설명과 같습니다.

    입출력 예 #2
    자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다.
*/

const test01 = (n, m) => {
    let result = [];
    let lcm = Math.min(n, m);

    // 최대공약수
    for(let i = Math.max(n, m); i >= 1; i--){
        if(n % i === 0 && m % i === 0){
            result.push(i);
            break;
        }
    }

    // 최소공배수
    while(true){
        if(lcm % n === 0 && lcm % m === 0){
            result.push(lcm);
            break;
        }
        lcm++
    }

    return result;
}

console.log(test01(3, 12))

  /*
      # 문제풀이 - test01
      1. 최대공약수와 최소공배수를 담을 빈 배열을 변수에 할당한다.
      2. for문을 통해 최대공약수를 구한다. 초기값은 최대공약수가 두 수보다 클 수 없기 때문에 파라미터 중 큰 값으로 설정한다.
      또한 1보다 작을 수 없으므로 1보다 작거나 같을 때까지 반복시키며 i값을 감소시킨다.
      3. if문을 통해 파라미터로 받은 두 수를 i로 나누었을 때 나머지가 0인 경우, 즉 두 수 모두 나누어질 경우 빈 배열에 push한 후 break를 통해
      for문에서 빠져나온다.
      4. while문을 통해 최소공배수를 구한다. 최소 공배수를 구할 때 까지 반복해야하므로 while문의 반복조건은 true로 설정한다.
      5. 최소공배수를 할당할 변수를 설정한다. 초기값은 최소공배수가 두 수보다 작을 수 없기 때문에 파라미터로 중 작은 값으로 설정한다.
      6. if문을 통해 초기값을 파라미터로 받은 두 수로 나누며 나머지가 0인 경우, 즉 초기값이 파라미터로 받은 두 수로 모두 나누어질 경우 빈 배열에
      push한 후 break를 통해 while문에서 빠져나간다. 아닌 경우 증감연산자를 통해 초기값을 증가시킨다.
      7. 최종적으로 최대공약수와 최소공배수가 담긴 배열을 반환한다.
  */